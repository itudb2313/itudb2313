#week5
-Joined github organization and repository
-Informations added to README.md

#week6
-database.py created and initialized with mysql.connector
-Database class created which contains queries in its methods
-Database connection URI is defined
-Insert and select queries of employee table are created
-Insert and select queries of rise_archive table are created

#week7
-Select and insert queries of "customer" table are created in database.py
-"customers.html" file has been created in templates folder to view customers 
data from the customer table
-"insert_customer.html" file has been created in templates folder to insert new customer 
record to the customer table using html form.
-"rises.html" file has been created in templates folder to view the data of rise_archive table
-"insert_rises.html" file has been created in templates folder to insert new record to "rise_archive" 
table through html form.
-"layout.html" file is modified to add necessary routing links for newly created html pages.
-Endpoint of "customers" has been created to answer 'GET' request which fetches customer data from customer 
table and sends it to "customers.html" page
-Endpoint of "insert_customer" has been created to insert a new record into the "customer" table.
 After insertion, it redirects to customers page (Fetches up-to-date data from the table)
-Endpoint of "rises" has been created to answer 'GET' requests. It fetches data
from rise_archive table and performs routing to rises.html
-Endpoint of "insert_rise" has been created to insert a new record into the "rise_archive" table. 
After insertion, it redirects to rises page (Fetches up-to-date data from the table)
-redirect and url_for packages are introduced in app.py to connect different endpoints in sync
-process_json endpoint has been created to demonstrate json data transfer between backend and frontend.

#week8
-Routing errors fixed and tested to ensure proper operation
-Endpoint of "employees" is created to fetch all customers from database and display on html page
-Endpoint of "insert_employee" is created to insert a new customer data into "customer" table
-HTML page of "employee_insert.html" is created to allow POST requests serving inserts and
-HTML page of "employee.html" is created to display employee data obtained from database
-Navbar links updated to provide routing to newly created pages
-Endpoint of "delete_customer" is created to delete a customer data through POST request
-"delete_customer" query is created to delete a record from "customer" table
-"customers.html" is modified to manage deletions on UI

#week9
-Query of "delete_rise" is created to delete a record from "rise_archive" table by "rise_id"
-Endpoint of "delete_rise" is created to perform deletion using HTML form through POST request
-"rises.html" is modified to add "deleteRise" form to issue POST requests
-"employees.html" is modified to add "deleteEmployee" form to issue POST requests
-Query of "delete_employee" is created to delete a record from "employees" table by "employee_id"
-Endpoint of "delete_employee" is created to perform deletion using HTML form through POST request
-Query of update_employee_by_id is created in database.py
-Query of update_rise_by_id is created in database.py

#week10
-customers.py endpoint file is created and endpoints for "customer" table are moved into it for MVC structure
-employees.py endpoint file is created and endpoints for "employee" table are moved into it for MVC structure
-rises.py endpoint file is created and endpoints for "rise_archive" table are moved into it for MVC structure
-4NF is achieved for "customer" table and necessary decomposition is performed
-4NF is achieved for "employee" table and necessary decomposition is performed
-4NF is achieved for "rise_archive" table and necessary decomposition is performed