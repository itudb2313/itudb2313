#week5
-Joined github organization and repository
-Informations added to README.md

#week6
-database.py created and initialized with mysql.connector
-Database class created which contains queries in its methods
-Database connection URI is defined
-Insert and select queries of employee table are created
-Insert and select queries of rise_archive table are created

#week7
-Select and insert queries of "customer" table are created in database.py
-"customers.html" file has been created in templates folder to view customers 
data from the customer table
-"insert_customer.html" file has been created in templates folder to insert new customer 
record to the customer table using html form.
-"rises.html" file has been created in templates folder to view the data of rise_archive table
-"insert_rises.html" file has been created in templates folder to insert new record to "rise_archive" 
table through html form.
-"layout.html" file is modified to add necessary routing links for newly created html pages.
-Endpoint of "customers" has been created to answer 'GET' request which fetches customer data from customer 
table and sends it to "customers.html" page
-Endpoint of "insert_customer" has been created to insert a new record into the "customer" table.
 After insertion, it redirects to customers page (Fetches up-to-date data from the table)
-Endpoint of "rises" has been created to answer 'GET' requests. It fetches data
from rise_archive table and performs routing to rises.html
-Endpoint of "insert_rise" has been created to insert a new record into the "rise_archive" table. 
After insertion, it redirects to rises page (Fetches up-to-date data from the table)
-redirect and url_for packages are introduced in app.py to connect different endpoints in sync
-process_json endpoint has been created to demonstrate json data transfer between backend and frontend.

#week8
-Routing errors fixed and tested to ensure proper operation
-Endpoint of "employees" is created to fetch all customers from database and display on html page
-Endpoint of "insert_employee" is created to insert a new customer data into "customer" table
-HTML page of "employee_insert.html" is created to allow POST requests serving inserts and
-HTML page of "employee.html" is created to display employee data obtained from database
-Navbar links updated to provide routing to newly created pages
-Endpoint of "delete_customer" is created to delete a customer data through POST request
-"delete_customer" query is created to delete a record from "customer" table
-"customers.html" is modified to manage deletions on UI

#week9
-Query of "delete_rise" is created to delete a record from "rise_archive" table by "rise_id"
-Endpoint of "delete_rise" is created to perform deletion using HTML form through POST request
-"rises.html" is modified to add "deleteRise" form to issue POST requests
-"employees.html" is modified to add "deleteEmployee" form to issue POST requests
-Query of "delete_employee" is created to delete a record from "employees" table by "employee_id"
-Endpoint of "delete_employee" is created to perform deletion using HTML form through POST request
-Query of update_employee_by_id is created in database.py
-Query of update_rise_by_id is created in database.py

#week10
-customers.py endpoint file is created and endpoints for "customer" table are moved into it for MVC structure
-employees.py endpoint file is created and endpoints for "employee" table are moved into it for MVC structure
-rises.py endpoint file is created and endpoints for "rise_archive" table are moved into it for MVC structure
-4NF is achieved for "customer" table and no necessary decomposition is performed
-4NF is achieved for "employee" table and no necessary decomposition is performed
-4NF is achieved for "rise_archive" table and no necessary decomposition is performed

#week11
-Endpoints in customers.py are reorganized to operate using Blueprint structure
-"customers.html" is adapted to Blueprint routing style
-Endpoints in employees.py are reorganized to operate using Blueprint structure
-"employess.html" is adapted to Blueprint routing style
-Endpoints in rises.py are reorganized to operate using Blueprint structure
-"rises.html" is adapted to Blueprint routing style

#week12
-Pagination feature has been introduced for customers endpoint 
-"customers.html" is modified for pagination
-Pagination feature has been introduced for employees endpoint 
-"employees.html" is modified for pagination
-Pagination feature has been introduced for rises endpoint 
-"rises.html" is modified for pagination
-update_customer endpoint and update_customer_by_id query is created
-update_customer.html is created
-update_employee.html is created
-update_rise endpoint and update_rise_by_id query is created
-delete_customer endpoint is created
-select_all_customers query is modified to return array of dictionary data
-select_all_employees query is modified to return array of dictionary data
-select_all_rises query is modified to return array of dictionary data
-employee.html, customer.html and rises.html are modified to display fetched data in a html table
-CSS codes for html tables in employee.html, customer.html and rises.html are written in layout.css
-Bootstrap is also used for table creation and styling
-Pop-Up modal is introduced to insert new data to the tables of customer, employee and rise_archive. Also general styling applied in layout.css
-Delete endpoints of customers, employees, rises are modified to enable in-line deleting
-For rise_archive in-line delete and update buttons are fully activated.
-Pop-Up update modal is completed for update_rise endpoint and introduced for update_employee and update_customer
-Query of get_rise_by_id is introduced
-CORS package is installed and integrated in app.py to allow CROSS-Origin requests
-Pop-Up update modal is completed for update_employee endpoint
-Query of get_employee_by_id is created
-In employees.html file, new javascript code and html block are created for Pop-Up modal
-Pop-Up update modal is completed for update_customer endpoint
-Query of get_customer_by_id is created
-In customers.html file, new javascript code and html block are created for Pop-Up modal
-layout.css is modified for accurate view to the user
-get_employee_by_id endpoint is created that fetches data from database
-get_customer_by_id endpoint is created that fetches data from database